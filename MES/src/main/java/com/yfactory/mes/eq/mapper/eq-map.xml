<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yfactory.mes.eq.mapper.EquipMapper">

	<!-- 모달창에 설비 코드와 설비명 출력 쿼리 -->
	<select id="searchEq" resultType="map">

		SELECT EQ_CD "설비코드" , EQ_NM "설비명"
		FROM EQ "eq"

	</select>

	<!-- 모달창에서 클릭한 데이터(설비코드)를 기반으로 코드와 이름을 가지고 오는 쿼리 -->
	<select id="selectEq" resultType="map">
		SELECT EQ_CD "설비코드" , EQ_NM "설비명"
		FROM EQ "eq"
		WHERE EQ_CD = #{eqCd}

	</select>
	
	<!-- 설비등록시 사원 리스트 조회 -->
	<select id="searchEmp" resultType="map">
		SELECT EMP_NO "사원번호" , EMP_NM "사원명"
		FROM EMPLOYEE 
	
	</select>


	<!-- 프로시저 컴파일 무조건 한번은 해야 mybatis 에서 프로시저를 인식합니다 -->
	<insert id="insertEq" statementType="CALLABLE"
		parameterType="com.yfactory.mes.eq.vo.EqVO">
		{CALL eq_insert(#{vdr_code},#{eq_nm}, #{eq_min}, #{eq_max}, #{eq_chkcyc},
		#{eq_mdno},#{eq_purdt}, #{eq_actst},#{eq_uph}, #{eq_inster}, #{uuid},
		#{eq_mdnm}, #{img_nm}, #{img_path})
		}
	</insert>
	
	<!-- 설비관리페이지 전체 리스트 -->
	<select id="searchEqMngList" resultType="map">
		SELECT e.eq_cd "설비코드" , e.eq_nm "설비명" , prc.proc_cd "공정코드" , prc.proc_nm
		"공정명", e.eq_min "최저온도" , e.eq_max "최고온도"
		,TO_CHAR(e.eq_purdt,'yyyy-MM-dd') "구매일자", CASE WHEN e.eq_actst like '1'
		THEN 'Y' ELSE 'N' END "사용여부"
		FROM eq e, process prc
		WHERE e.eq_cd = prc.eq_cd
	</select>

	<!-- 공정코드 공정명 전체조회 -->
	<select id="searchPrcList" resultType="map">
		SELECT proc_cd "공정코드" , proc_nm "공정명"
		FROM process
	</select>
	
	<!-- 공정코드 공정명 설비코드 기준 조회 -->
	<select id="selectEqPrc" resultType="map">
		SELECT proc_cd "공정코드" ,proc_nm "공정명"
		FROM process
		WHERE eq_cd = #{eqCd}
	</select>

	<!-- 업체코드 업체구분코드 업체명 전체조회 -->
	<select id="getVdrList" resultType="map">
	 <![CDATA[
		SELECT VDR_CD "업체코드", VEN_CD "업체구분코드", VDR_NM "업체명"
		FROM VENDOR VDR
		WHERE VEN_CD = 'VEN01'
		]]>
	</select>

	<!-- 설비 사용여부 및 비가동 상태를 포함판 조회 -->


	<select id="getEqActStatList" resultType="map">
	SELECT			E.EQ_CD "설비코드" ,
						E.EQ_MDNM "설비명" ,
						PRC.PROC_CD "공정코드" ,
						PRC.PROC_NM "공정명" ,
						E.EQ_CHKCYC "점검주기",
						CASE WHEN E.EQ_ACTST like 'USE-01' THEN 'Y' ELSE 'N' END "사용여부"
	FROM 			EQ E ,
						PROCESS PRC
	WHERE 			E.EQ_CD = PRC.EQ_CD
	AND 				E.EQ_CD = INA.EQ_CD
	ORDER BY 1
	
	</select>
	
	<!-- 설비 사용여부 및 비가동 상태를 포함판 검색 -->
	<select id="getEqInActList" resultType="map">
	SELECT			E.EQ_CD "설비코드" ,
						E.EQ_MDNM "설비명" ,
						PRC.PROC_CD "공정코드" ,
						PRC.PROC_NM "공정명" ,
						E.EQ_CHKCYC "점검주기",
						CASE WHEN E.EQ_ACTST like 'USE-01' THEN 'Y' ELSE 'N' END "사용여부",
						NVL2(INA.EQ_INASD, 'Y' , 'N') "비가동여부" 
	FROM 			EQ E ,
						PROCESS PRC ,
						EQ_INA INA
	<where>	
	
					E.EQ_CD = PRC.EQ_CD

	AND				E.EQ_CD = INA.EQ_CD
	<if test="key = 'USE01'">
	AND  E.EQ_ACTST = 'USER01'

	</if>
	<if test="key = 'USE02'">
	AND  E.EQ_ACTST = 'USE02'
	</if>
	</where>
	ORDER BY 1	
	</select>
	
	<select id="getEqInList" resultType="map">
		select	ei.eq_cd AS "설비코드",
				e.eq_nm AS "설비명",
				ei.eq_inasd AS "시작날짜",
				ei.dis_code AS "종료날짜",
				ei.eq_note AS "사유"
		from 	eq_ina ei, eq e
		where 	ei.eq_cd = e.eq_cd
	</select>


<select id="getEqChkList" resultType="map">
SELECT  e.eq_cd "설비코드" ,
           e.eq_mdnm "설비명" , 
           e.eq_nm "설비구분" , 
           e.EQ_CHKCYC "점검주기", 
           TO_CHAR(chk.eq_chkdt, 'yyyy-MM-dd') "점검일자",
           TO_CHAR(to_date(chk.eq_chkdt,'yy/MM/dd') + e.eq_chkcyc , 'yyyy-MM-dd') "차기점검일",
           case when chk.chk_rscd = 'DIV01' then '재점검 필요' 
           when chk.chk_rscd = 'DIV02' then '통과' 
           END "판정",
           chk.EQ_CHKDTL "점검내역" ,
           case when chk.eq_chkr = 1011 then '김세명'
           when chk.eq_chkr = 1021 then '박진영'
           when chk.eq_chkr = 1031 then '홍석민'
           when chk.eq_chkr = 1041 then '이웅재'
           when chk.eq_chkr = 1051 then '김진환'
           end  "검수자"
FROM eq e , eq_chk chk
WHERE e.eq_cd = chk.eq_cd

</select>

<!-- 설비구분명 + 점검시작일 + 차기 점검일 기준 조회  -->
<select id="getEqChkSelectList" resultType="map">
SELECT e.EQ_CD "설비코드" ,
 			e.EQ_NM "설비명" , 
 			TO_CHAR(chk.eq_chkdt, 'yyyy-MM-dd') "점검일자",
 			TO_CHAR(to_date(chk.eq_chkdt,'yyyy-MM-dd') + e.eq_chkcyc , 'yyyy-MM-dd') "차기점검일",
 			e.EQ_CHKCYC "점검주기"

FROM 	EQ e , EQ_CHK chk
WHERE e.eq_cd = chk.eq_cd
AND 		e.eq_nm like '%'||#{eq_nm}||'%'
AND 		chk.eq_chkdt BETWEEN TO_DATE(#{eq_chkdt1} , 'yy/MM/dd') AND TO_DATE(#{eq_chkdt2} , 'yy/MM/dd') 
</select>

<!--  일 점검 건수 조회-->
<select id="getEqDailyChkCount" resultType="map">
SELECT 		DISTINCT TO_CHAR(eq_chkdt,'yyyy-MM-dd') "점검일자" , 
				count(eq_chkdt) "건수" 
FROM 		eq_chk
WHERE		eq_chkdt BETWEEN #{chkdt1} AND #{chkdt2}
GROUP BY eq_chkdt
</select>


</mapper>