<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yfactory.mes.eq.mapper.EquipMapper">

		<resultMap type="com.yfactory.mes.common.vo.ImageAttachVO" id="img">
			<result property="img_path" column="img_img_path" javaType="java.lang.String" jdbcType="CLOB"/>
		</resultMap>
		
		


	<!-- 모달창에 설비 코드와 설비명 출력 쿼리 -->
	<select id="searchEq" resultType="map">


		SELECT DISTINCT E.EQ_NM "구분코드" , COMM.CD_NM "구분명"
		FROM EQ E ,COMM_CODE COMM
		WHERE E.EQ_NM = COMM.COMM_CD
        ORDER BY 1


	</select>


	<!-- 모달창에서 클릭한 데이터(설비코드)를 기반으로 코드와 이름을 가지고 오는 쿼리 (현재 사용X) -->
	<select id="selectEq" resultType="map">
		SELECT e.EQ_CD "설비코드", comm.COMM.CD_NM "설비구분" , e.EQ_MDNM "설비명"
		FROM EQ e , COMM_CODE comm
		WHERE e.EQ_CD = #{eqCd}

	</select>
	
	
	<!-- 설비등록시 사원 리스트 조회 -->
	<select id="searchEmp" resultType="map">
		SELECT EMP_NO "사원번호" , EMP_NM "사원명"
		FROM EMPLOYEE 
	
	</select>


	<!-- 프로시저 컴파일 무조건 한번은 해야 mybatis 에서 프로시저를 인식합니다 -->
	<insert id="insertEq" statementType="CALLABLE"
		parameterType="com.yfactory.mes.eq.vo.EqVO">
		{CALL eq_insert(#{vdr_code},#{eq_nm}, #{eq_min}, #{eq_max}, #{eq_chkcyc},
		#{eq_mdno},#{eq_purdt}, REPLACE(#{eq_actst}, ',' ,''),#{eq_uph}, #{eq_inster}, #{uuid},
		#{eq_mdnm}, #{img_nm}, #{img_path})
		}
	</insert>

	
	<!-- 설비관리페이지 전체 리스트 -->
	<select id="searchEqMngList" resultType="map">
	<!-- SELECT e.eq_cd "설비코드" , 
				case when lower(eq_nm) like 'yafs01' then '반죽기'
                	    when lower(eq_nm) like 'yafs02' then '성형기'
                        when lower(eq_nm) like 'yafs03' then '냉각기'
                        when lower(eq_nm) like 'yafs04' then '포장기'
                        end "설비구분",
                e.eq_mdnm "설비명" , prc.proc_cd "공정코드" , 
				prc.proc_nm	"공정명", e.eq_min "최저온도" , e.eq_max "최고온도"
      			,TO_CHAR(e.eq_purdt,'yyyy-MM-dd') "구매일자",
      			CASE WHEN e.eq_actst like 'USE01'
				THEN 'Y' ELSE 'N' END "사용여부"
      FROM eq e, process prc
      WHERE e.eq_cd = prc.eq_cd(+)
      ORDER BY 1 -->
      SELECT DISTINCT e.eq_cd "설비코드" , 
				COMM.CD_NM "설비구분",
                e.eq_mdnm "설비명" , prc.proc_cd "공정코드" , 
				prc.proc_nm	"공정명", e.eq_min "최저온도" 
				, e.eq_max "최고온도"
      			<!-- ,TO_CHAR(e.eq_purdt,'yyyy-MM-dd') "구매일자", -->
      			<!-- comm2.cd_nm "사용여부" -->
      FROM eq e, process prc , COMM_CODE COMM , COMM_CODE COMM2
      WHERE e.eq_cd = prc.eq_cd(+)
      AND e.eq_nm = comm.comm_cd
      <!-- AND e.eq_actst = comm2.comm_cd -->
      ORDER BY 1
	</select>


	<!-- 공정코드 공정명 설비가 지정되지 않은 리스트 조회 -->
	<select id="searchPrcList" resultType="map">
		SELECT proc_cd "공정코드" , proc_nm "공정명"
		FROM process
		WHERE EQ_CD IS NULL
	</select>
	
	
	<!-- 공정코드 공정명 설비코드 기준 조회 -->
	<select id="selectEqPrc" resultType="map">
		SELECT proc_cd "공정코드" ,proc_nm "공정명"
		FROM process
		WHERE proc_cd = #{prcCd}
	</select>


	<!-- 업체코드 업체구분코드 업체명 전체조회 -->
	<select id="getVdrList" resultType="map">
	 <![CDATA[
		SELECT VDR_CD "업체코드", VEN_CD "업체구분코드", VDR_NM "업체명"
		FROM VENDOR VDR
		WHERE VEN_CD = 'VEN01'
		]]>
	</select>

	<!-- 설비 사용여부 및 비가동 상태를 포함판 조회 -->


	<select id="getEqActStatList" resultType="map">
	SELECT			E.EQ_CD "설비코드",
					CD.CD_NM "구분명",
					E.EQ_MDNM "설비명",
					PRC.PROC_CD "공정코드" ,
					PRC.PROC_NM "공정명" ,
					E.EQ_CHKCYC "점검주기",
					CD2.CD_NM "사용여부"
	FROM 			EQ E ,
					PROCESS PRC,
                    COMM_CODE CD,
                    COMM_CODE CD2
	WHERE 			E.EQ_CD = PRC.EQ_CD
    AND             E.EQ_NM = CD.COMM_CD
    AND             E.EQ_ACTST = CD2.COMM_CD
	ORDER BY 1
	
	</select>
	
	
	<!-- 설비 사용여부 및 비가동 상태를 포함판 검색 -->
	<select id="getEqInActList" resultType="map">
	SELECT			E.EQ_CD "설비코드",
					CD.CD_NM "구분명",
					E.EQ_MDNM "설비명",
					PRC.PROC_CD "공정코드" ,
					PRC.PROC_NM "공정명" ,
					E.EQ_CHKCYC "점검주기",
					CD2.CD_NM "사용여부"
	FROM 			EQ E ,
					PROCESS PRC,
                    COMM_CODE CD,
                    COMM_CODE CD2
	WHERE 			E.EQ_CD = PRC.EQ_CD
    AND             E.EQ_NM = CD.COMM_CD
    AND             E.EQ_ACTST = CD2.COMM_CD
	<if test="key == 1">
	</if>
	<if test="key == 2">
	AND  E.EQ_ACTST = 'USE01'
	</if>
	<if test="key == 3">
	AND  E.EQ_ACTST = 'USE02'
	</if>
	ORDER BY 1	
	</select>
	
	
	<!-- 비가동 설비 내역 -->
	<select id="getEqInList" resultType="map">
		select	    ei.eq_actcd AS "설비가동코드",
	                ei.eq_cd AS "설비코드",
	                cm2.cd_nm "구분명",
					e.eq_mdnm AS "설비명",
					TO_CHAR(ei.eq_inasd, 'yyyy-MM-dd hh24:mi') AS "시작날짜",
					TO_CHAR(ei.eq_inaed, 'yyyy-MM-dd hh24:mi') AS "종료날짜",
					cm.cd_nm AS "사유"
		from 		eq_ina ei, 
                        eq e, 
                        comm_code cm,
                        comm_code cm2
		where 		ei.eq_cd = e.eq_cd
		and       	cm.comm_cd = ei.dis_code
        and           cm2.comm_cd = e.eq_nm
		ORDER BY ei.eq_inasd DESC
	</select>
	
	
	<!-- 비가동 설비 내역 검색 -->
	<select id="searchEqIna" parameterType="map" resultType="map">
		select	    ei.eq_actcd AS "설비가동코드",
	                ei.eq_cd AS "설비코드",
	                cm2.cd_nm "구분명",
					e.eq_mdnm AS "설비명",
					TO_CHAR(ei.eq_inasd, 'yyyy-MM-dd hh24:mi') AS "시작날짜",
					TO_CHAR(ei.eq_inaed, 'yyyy-MM-dd hh24:mi') AS "종료날짜",
					cm.cd_nm AS "사유"
		from 		eq_ina ei, 
                        eq e, 
                        comm_code cm,
                        comm_code cm2
		where 		ei.eq_cd = e.eq_cd
		and       	cm.comm_cd = ei.dis_code
        and           cm2.comm_cd = e.eq_nm
		<if test="req1 != '' and req2 != ''">
		and		ei.eq_inasd BETWEEN TO_DATE(#{req1},'YYYY-MM-DD') AND TO_DATE(#{req2},'YYYY-MM-DD')
		</if>
		<if test="eqCd != ''">
		and		ei.eq_cd = #{eqCd}
		</if>
		<if test="eqCd == '' and eqNm != ''">
		and		e.eq_mdnm = #{eqNm}
		</if>
		ORDER BY ei.eq_inasd DESC
	</select>
	
	<!-- 비가동 설비 내역 추가 -->
	<insert id="setEqIn" statementType="CALLABLE"  parameterType="map">
		{CALL eq_ina_pro (#{p_eq_cd}, #{p_eq_sd}, #{p_eq_ed}, #{p_eq_dc}, #{p_eq_nt})}
	</insert>


<select id="getEqChkList" resultType="map">

SELECT DISTINCT E.eq_cd "설비코드", 
        chk.eq_cd "점검설비코드",
        TO_CHAR(chk.eq_chkdt, 'yyyy-MM-dd') "점검일자",
        E.EQ_MDNM "설비명" , 
 		E.EQ_CHKCYC "점검주기",
        TO_CHAR(to_date(chk.eq_chkdt,'yy/MM/dd') + e.eq_chkcyc , 'yyyy-MM-dd') "차기점검일"
        ,chk.EQ_CHKDTL "점검내역"
        ,comm.cd_nm "결과"
        ,emp.emp_nm "검수자"
FROM   EQ E, EQ_CHK CHK , EMPLOYEE EMP
, COMM_CODE COMM
WHERE  E.EQ_CD =  CHK.EQ_CD
AND CHK.CHK_RSCD = COMM.COMM_CD
AND CHK.EQ_CHKR = EMP.EMP_NO
</select>


<!-- 설비구분명 기준 점검미지정 설비 조회 (점검테이블에 존재하지 않는 설비들)  -->
<select id="getEqChkSelectList" resultType="map">

SELECT DISTINCT E.EQ_CD "설비코드" , 
            E.EQ_MDNM "설비명" ,
            E.EQ_CHKCYC "점검주기" ,
            TO_CHAR(TRUNC(EQ_CHKDT), 'yyyy-MM-dd') "점검일자",
            TO_CHAR(TO_DATE(chk.eq_chkdt,'yy/MM/dd') + e.eq_chkcyc , 'yyyy-MM-dd') "차기점검일",
            CHK.EQ_CHKDTL "점검내역",
            COMM.CD_NM "결과"
FROM EQ E , EQ_INA INA , EQ_CHK chk, comm_code comm
WHERE E.EQ_CD = INA.EQ_CD
AND E.EQ_CD = CHK.EQ_CD
AND CHK.CHK_RSCD = COMM.COMM_CD
AND INA.EQ_INAED IS NULL 
<if test="eq_nm != null and eq_nm != ''">
AND    E.eq_mdnm LIKE #{eq_nm}
</if>

ORDER BY E.EQ_CD
</select>


<!--  일 점검 건수 조회-->
<select id="getEqDailyChkCount" resultType="map">

SELECT TO_CHAR(TRUNC(EQ_CHKDT), 'yyyy-MM-dd') "점검일자", COUNT(TRUNC(EQ_CHKDT)) "건수"
FROM 		eq_chk
WHERE		
TO_DATE(eq_chkdt , 'yy/MM/dd') BETWEEN #{chkdt1} AND #{chkdt2}
GROUP BY TRUNC(EQ_CHKDT)
</select>


<insert id="eqChkResultAjax" parameterType="map">
<foreach collection="list" index="index" item="item" open="INSERT ALL" close="SELECT * FROM DUAL" separator=" ">
INTO EQ_CHK(EQ_CHKDT , EQ_CD , EQ_CHKDTL , CHK_RSCD , EQ_CHKR)
VALUES (
TO_DATE( sysdate,'yy/MM/dd'), 
			  #{item.설비코드}, 
			  #{item.점검내역},
			  #{item.결과},
			  #{item.검수자}
			  )
</foreach>
</insert>

<select id="dailyChkListAjax" resultType="map">
SELECT  e.eq_cd "설비코드" ,
          	 e.eq_mdnm "설비명" , 
            comm.cd_nm "설비구분" , 
           e.EQ_CHKCYC "점검주기", 
           TO_CHAR(chk.eq_chkdt, 'yyyy-MM-dd') "점검일자",
           TO_CHAR(to_date(chk.eq_chkdt,'yy/MM/dd') + e.eq_chkcyc , 'yyyy-MM-dd') "차기점검일",
           comm2.CD_NM "결과",
           chk.EQ_CHKDTL "점검내역" ,
          emp.emp_nm  "검수자"
FROM 	eq e , eq_chk chk , EMPLOYEE emp , 
            COMM_CODE comm , COMM_CODE comm2
WHERE e.eq_cd = chk.eq_cd
AND e.eq_inster = emp.emp_no
AND e.eq_nm = comm.comm_cd
AND chk.chk_rscd = comm2.comm_cd
AND 		TO_CHAR(chk.eq_chkdt,'yy/MM/dd') IN 
<foreach collection="list" item="item" open="(" separator=", "  close=")">
		TO_DATE(#{item.eq_chkdt},'yy/MM/dd') 
</foreach>
ORDER BY chk.eq_chkdt

</select>

<!-- 비가동 설비 가동 시작 -->
<update id="updateIna" parameterType="Map">
	{CALL eq_ina_update (#{p_actcd}, #{p_eq_cd})}
</update>

<delete id="eqChkDelAjax" parameterType="map">
DELETE FROM EQ_CHK
WHERE EQ_CD IN
<foreach collection="list" item="item" open="(" separator="," close=")">
		#{item.eq_cd}
</foreach>

</delete>


<update id="eqMngUpdateAjax" parameterType="map" statementType="CALLABLE" >
{CALL eq_update(#{eq_cd},#{proc_cd},#{proc_nm},#{eq_min},#{eq_max},#{eq_purdt},
						  #{eq_actst}
						  )}
</update>

<select id="getEqTemp" resultType="map">
SELECT E.EQ_CD "설비코드",EQ_UPH "초당생산량" , E.EQ_MIN "최소온도" , E.EQ_MAX "최대온도" , PRC.PROC_NM "공정명", LN.LINE_CD "라인코드"
FROM EQ E , PROCESS PRC ,LINE LN
WHERE E.EQ_CD = PRC.EQ_CD
AND PRC.PROC_CD = LN.PROC_CD
AND line_cd = #{lineCd}
</select>

<select id="eqModalSelect" resultType="map">
	SELECT 	e.eq_cd as "설비코드", 
         	c.cd_nm as "구분명",
         	e.eq_mdnm as "설비명"
	FROM    eq e, comm_code c
	WHERE   e.eq_nm = c.comm_cd
</select>


<select id="getEqDetailDataAjax" resultType="map">
SELECT      DISTINCT e.eq_cd "설비코드",
				e.eq_mdnm "설비명",
				prc.proc_cd "공정코드",
				prc.proc_nm "공정명",
				e.eq_chkcyc "점검주기",
				TO_CHAR(chk.eq_chkdt, 'yyyy-MM-dd') "점검일자",
				TO_CHAR(to_date(chk.eq_chkdt,'yy/MM/dd') + e.eq_chkcyc , 'yyyy-MM-dd') "차기점검일",
				emp.emp_nm "등록인",
				comm.CD_NM "사용여부"

	FROM eq e, process prc , eq_chk chk , employee emp , vendor vdr , comm_code comm 
	
	WHERE e.eq_cd = prc.eq_cd
	<!-- AND   e.eq_cd = chk.eq_cd; -->
	AND  e.eq_inster = emp.emp_no
    AND e.eq_actst = comm.comm_cd
    AND e.eq_cd = #{eqDtlCd}
    ORDER BY e.eq_cd
</select>


<select id="getEqImgAjax" resultType="String">

SELECT img.img_path
FROM EQ e , IMG_ATTATCH img
WHERE e.uuid = img.uuid
AND e.eq_cd = #{eqDtlCd}
</select>

<select id="getEqUph" resultType="map">
SELECT PS.PROC_PASSQTY "합격량",
		PC.PROC_QTY "투입량",
        PRO.EQ_CD "설비코드",
        PRO.PROC_NM "공정명",
        LN.LINE_CD "라인코드",
        PS.PROC_ST "상태코드",
        pc.proc_qty "투입량",
        E.EQ_MDNM "설비명"
FROM PROC_ST PS, PROC_PRC PC, PROCESS PRO, LINE LN, EQ E
WHERE PS.PROC_PRCD = PC.PROC_PRCD
AND PS.LINE_TURN = PC.LINE_TURN
AND PC.PROC_CD = PRO.PROC_CD
AND LN.PROC_CD = PRO.PROC_CD
AND E.EQ_CD = PRO.EQ_CD
AND LN.LINE_CD = #{lineCd}
AND PS.PROC_ST NOT LIKE 'PLAN05'
ORDER BY 2
</select>


</mapper>